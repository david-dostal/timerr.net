{"version":3,"sources":["../../scripts/common/google-maps-timezones.js"],"names":["GmTimeApi","apiKey","_apiKey","now","Date","_totalOffsetSeconds","getTimezoneOffset","_urlPattern","location","timestamp","key","n","e","onSuccess","onFailure","targetUrl","_timestamp","console","log","request","XMLHttpRequest","onreadystatechange","_processResponse","open","send","readyState","status","timezoneData","JSON","parse","responseText","dstOffset","rawOffset","getTime","timeZoneTime"],"mappings":";;;;;;IAAMA,S;AACF,uBAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKC,OAAL,GAAeD,MAAf;AACA,YAAIE,MAAM,IAAIC,IAAJ,EAAV;AACA,aAAKC,mBAAL,GAA2B,EAAE,IAAID,IAAJ,GAAWE,iBAAX,KAAiC,EAAnC,CAA3B;AACA,aAAKC,WAAL,GAAmB,UAACC,QAAD,EAAWC,SAAX,EAAsBC,GAAtB;AAAA,oFACgDF,QADhD,mBACsEC,SADtE,aACuFC,GADvF;AAAA,SAAnB;AAEH;;;;oCAEWC,C,EAAGC,C,EAAGC,S,EAAWC,S,EAAW;AAAA;;AACpC,gBAAIC,YAAY,KAAKR,WAAL,CAAoBI,CAApB,SAAyBC,CAAzB,EAA8B,KAAKI,UAAL,KAAoB,IAAlD,EAAwD,KAAKd,OAA7D,CAAhB;AACAe,oBAAQC,GAAR,CAAYH,SAAZ;AACA,gBAAII,UAAU,IAAIC,cAAJ,EAAd;AACAD,oBAAQE,kBAAR,GAA6B;AAAA,uBAAM,MAAKC,gBAAL,CAAsBH,OAAtB,EAA+BN,SAA/B,EAA0CC,SAA1C,CAAN;AAAA,aAA7B;AACAK,oBAAQI,IAAR,CAAa,KAAb,EAAoBR,SAApB,EAA+B,IAA/B;AACAI,oBAAQK,IAAR;AACH;;;yCAEgBL,O,EAASN,S,EAAWC,S,EAAW;AAC5C,gBAAIK,QAAQM,UAAR,KAAuB,CAA3B,EAA8B;AAC1B,oBAAIN,QAAQO,MAAR,KAAmB,GAAvB,EAA4B;AACxBZ;AACA;AACH;AACD,oBAAIa,eAAeC,KAAKC,KAAL,CAAWV,QAAQW,YAAnB,CAAnB;AACA,oBAAIH,aAAaD,MAAb,KAAwB,IAA5B,EAAkC;AAC9BZ;AACA;AACH;AACD,qBAAKT,mBAAL,GAA2BsB,aAAaI,SAAb,GAAyBJ,aAAaK,SAAjE;AACAnB;AACH;AACJ;;;qCAEY;AACT,gBAAIV,MAAM,IAAIC,IAAJ,EAAV;AACA,mBAAOD,IAAI8B,OAAJ,KAAgB9B,IAAIG,iBAAJ,KAA0B,KAAjD;AACH;;;sCAEa;AACV,gBAAIH,MAAM,KAAKa,UAAL,EAAV;AACA,gBAAIkB,eAAe,IAAI9B,IAAJ,CAASD,MAAM,KAAKE,mBAAL,GAA2B,IAA1C,CAAnB;AACA,mBAAO6B,YAAP;AACH","file":"google-maps-timezones.js","sourcesContent":["class GmTimeApi {\r\n    constructor(apiKey) {\r\n        this._apiKey = apiKey;\r\n        let now = new Date();\r\n        this._totalOffsetSeconds = -(new Date().getTimezoneOffset() * 60);\r\n        this._urlPattern = (location, timestamp, key) =>\r\n            `https://maps.googleapis.com/maps/api/timezone/json?location=${location}&timestamp=${timestamp}&key=${key}`;\r\n    }\r\n\r\n    setLocation(n, e, onSuccess, onFailure) {\r\n        let targetUrl = this._urlPattern(`${n},${e}`, this._timestamp() / 1000, this._apiKey);\r\n        console.log(targetUrl);\r\n        let request = new XMLHttpRequest();\r\n        request.onreadystatechange = () => this._processResponse(request, onSuccess, onFailure);\r\n        request.open('get', targetUrl, true);\r\n        request.send();\r\n    }\r\n\r\n    _processResponse(request, onSuccess, onFailure) {\r\n        if (request.readyState === 4) {\r\n            if (request.status !== 200) {\r\n                onFailure();\r\n                return;\r\n            }\r\n            let timezoneData = JSON.parse(request.responseText);\r\n            if (timezoneData.status !== 'OK') {\r\n                onFailure();\r\n                return;\r\n            }\r\n            this._totalOffsetSeconds = timezoneData.dstOffset + timezoneData.rawOffset;\r\n            onSuccess();\r\n        }\r\n    }\r\n\r\n    _timestamp() {\r\n        let now = new Date();\r\n        return now.getTime() + now.getTimezoneOffset() * 60000;\r\n    }\r\n\r\n    currentTime() {\r\n        let now = this._timestamp();\r\n        let timeZoneTime = new Date(now + this._totalOffsetSeconds * 1000);\r\n        return timeZoneTime;\r\n    }\r\n}"]}