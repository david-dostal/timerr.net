{"version":3,"sources":["../../scripts/common/number-input.js"],"names":["NumberInput","inputElement","_input","addEventListener","e","_onKeyDown","_onWheel","passive","select","_onBlur","_onInput","max","parseInt","attributes","undefined","value","min","key","_adjustValue","deltaY","_formatValue","setCustomValidity","validity","valid","validationMessage","amount","oldValue","newValue","Math","toString","padStart"],"mappings":"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","file":"number-input.js","sourcesContent":["class NumberInput {\r\n    constructor(inputElement) {\r\n        this._input = inputElement;\r\n        this._input.addEventListener('keydown', (e) => this._onKeyDown(e));\r\n        this._input.addEventListener('wheel', (e) => this._onWheel(e), {passive: true});\r\n        this._input.addEventListener('focus', () => this._input.select());\r\n        this._input.addEventListener('blur', (e) => this._onBlur(e));\r\n        this._input.addEventListener('input', (e) => this._onInput(e));\r\n        this.max = parseInt(this._input.attributes['max'] === undefined ? '100' : this._input.attributes['max'].value);\r\n        this.min = parseInt(this._input.attributes['min'] === undefined ? '0' : this._input.attributes['min'].value);\r\n        if(this._input.attributes['autofocus']) {\r\n            this._input.select(); // Select on autofocus even in Firefox\r\n        }\r\n    }\r\n\r\n    _onKeyDown(e) {\r\n        if (e.key === 'ArrowUp') {\r\n            this._adjustValue(1);\r\n        } else if (e.key === 'ArrowDown') {\r\n            this._adjustValue(-1);\r\n        }\r\n    }\r\n\r\n    _onWheel(e) {\r\n        if (e.deltaY < 0) {\r\n            this._adjustValue(1);\r\n        } else if (e.deltaY > 0) {\r\n            this._adjustValue(-1);\r\n        }\r\n    }\r\n\r\n    _onBlur(e) {\r\n        this._formatValue();\r\n    }\r\n\r\n    _onInput(e) {\r\n        this._input.setCustomValidity('');\r\n        if (!this._input.validity.valid) {\r\n            let validationMessage = `Please enter a number between ${this.min} and ${this.max}`;\r\n            this._input.setCustomValidity(validationMessage);\r\n        }\r\n    }\r\n\r\n    _adjustValue(amount) {\r\n        let oldValue = parseInt(this._input.value);\r\n        let newValue = oldValue + amount;\r\n        newValue = Math.min(newValue, this.max);\r\n        newValue = Math.max(newValue, this.min);\r\n        this._input.value = newValue.toString();\r\n        this._formatValue();\r\n    }\r\n\r\n    _formatValue() {\r\n        this._input.value = this._input.value.padStart(2, '0')\r\n    }\r\n}"]}