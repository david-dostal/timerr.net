{"version":3,"sources":["../../scripts/common/base-timer.js"],"names":["TimerState","Object","freeze","STOPPED","RUNNING","PAUSED","BaseTimer","interval","onTick","_intervalTimer","IntervalTimer","_tick","reset","getTime","_state","_startTime","_pauseTime","Date","start","elapsedTime","pause","pauseLength","resume","currentTime","startTime"],"mappings":";;;;;;AAAA,IAAMA,aAAaC,OAAOC,MAAP,CAAc;AAC7BC,aAAS,SADoB;AAE7BC,aAAS,SAFoB;AAG7BC,YAAQ;AAHqB,CAAd,CAAnB;;IAMMC,S;AACF,uBAAYC,QAAZ,EAAsBC,MAAtB,EAA8B;AAAA;;AAAA;;AAC1B,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,cAAL,GAAsB,IAAIC,aAAJ,CAAkB;AAAA,mBAAM,MAAKC,KAAL,EAAN;AAAA,SAAlB,EAAsC,KAAKJ,QAA3C,CAAtB;AACA,aAAKK,KAAL;AACH;;;;gCAEO;AACJ,iBAAKJ,MAAL,CAAY,KAAKK,OAAL,EAAZ;AACH;;;gCAEO;AACJ,iBAAKC,MAAL,GAAcd,WAAWG,OAAzB;AACA,iBAAKY,UAAL,GAAkB,IAAlB;AACA,iBAAKC,UAAL,GAAkB,IAAlB;AACA,iBAAKP,cAAL,CAAoBG,KAApB;AACH;;;gCAEO;AACJ,iBAAKE,MAAL,GAAcd,WAAWI,OAAzB;AACA,iBAAKW,UAAL,GAAkB,IAAIE,IAAJ,GAAWJ,OAAX,EAAlB;AACA,iBAAKJ,cAAL,CAAoBS,KAApB;AACH;;;gCAEO;AACJ,iBAAKJ,MAAL,GAAcd,WAAWK,MAAzB;AACA,iBAAKW,UAAL,GAAkB,KAAKG,WAAL,EAAlB;AACA,iBAAKV,cAAL,CAAoBW,KAApB;AACH;;;iCAEQ;AACL,iBAAKN,MAAL,GAAcd,WAAWI,OAAzB;AACA,gBAAIiB,cAAc,KAAKF,WAAL,KAAqB,KAAKH,UAA5C;AACA,iBAAKD,UAAL,IAAmBM,WAAnB;AACA,iBAAKZ,cAAL,CAAoBa,MAApB;AACH;;;sCAEa;AACV,gBAAIC,cAAc,IAAIN,IAAJ,GAAWJ,OAAX,EAAlB;AACA,mBAAOU,eAAe,KAAKC,SAAL,MAAoB,IAApB,GAA2BD,WAA3B,GAAyC,KAAKC,SAAL,EAAxD,CAAP;AACH;;;oCAEW;AACR,mBAAO,KAAKT,UAAZ;AACH;;;kCAES;AACN,mBAAO,KAAKI,WAAL,EAAP;AACH;;;mCAEU;AACP,mBAAO,KAAKL,MAAZ;AACH","file":"base-timer.js","sourcesContent":["const TimerState = Object.freeze({\r\n    STOPPED: 'STOPPED',\r\n    RUNNING: 'RUNNING',\r\n    PAUSED: 'PAUSED'\r\n});\r\n\r\nclass BaseTimer {\r\n    constructor(interval, onTick) {\r\n        this.interval = interval;\r\n        this.onTick = onTick;\r\n        this._intervalTimer = new IntervalTimer(() => this._tick(), this.interval);\r\n        this.reset();\r\n    }\r\n\r\n    _tick() {\r\n        this.onTick(this.getTime());\r\n    }\r\n\r\n    reset() {\r\n        this._state = TimerState.STOPPED;\r\n        this._startTime = null;\r\n        this._pauseTime = null;\r\n        this._intervalTimer.reset();\r\n    }\r\n\r\n    start() {\r\n        this._state = TimerState.RUNNING;\r\n        this._startTime = new Date().getTime();\r\n        this._intervalTimer.start();\r\n    }\r\n\r\n    pause() {\r\n        this._state = TimerState.PAUSED;\r\n        this._pauseTime = this.elapsedTime();\r\n        this._intervalTimer.pause();\r\n    }\r\n\r\n    resume() {\r\n        this._state = TimerState.RUNNING;\r\n        let pauseLength = this.elapsedTime() - this._pauseTime;\r\n        this._startTime += pauseLength;\r\n        this._intervalTimer.resume();\r\n    }\r\n\r\n    elapsedTime() {\r\n        let currentTime = new Date().getTime();\r\n        return currentTime - (this.startTime() == null ? currentTime : this.startTime());\r\n    }\r\n\r\n    startTime() {\r\n        return this._startTime;\r\n    }\r\n\r\n    getTime() {\r\n        return this.elapsedTime();\r\n    }\r\n\r\n    getState() {\r\n        return this._state;\r\n    }\r\n}"]}